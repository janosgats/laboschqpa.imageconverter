/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'idea'
    id 'java'
    id 'maven-publish'
    id 'org.springframework.boot' version '2.4.1'
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "io.freefair.lombok" version "5.3.0"
}
repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}


idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

dependencies {
    implementation platform('software.amazon.awssdk:bom:2.15.69')
    implementation 'software.amazon.awssdk:s3'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-core'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'org.projectreactor:reactor-spring:1.0.1.RELEASE'
    implementation 'com.janosgats.logging:flexible-appender:1.1.5'
    implementation 'org.apache.tika:tika-core:1.24.1'
    implementation 'org.apache.tika:tika-parsers:1.24.1'

    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'mysql:mysql-connector-java'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    testImplementation 'org.junit.jupiter:junit-jupiter:5.6.0'
    testImplementation 'com.squareup.okhttp3:okhttp:4.0.1'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.0.1'
}

configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

group = 'com.laboschqpa'
version = '0.0.1-SNAPSHOT'
description = 'FileHost of Qpa and CST web'
java.sourceCompatibility = JavaVersion.VERSION_11

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

bootJar {
    archiveFileName = 'laboschqpa.filehost.jar'
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
}

task resolveDependencies {
    doLast {
        println "Resolving dependencies"
        project.rootProject.allprojects.each { subProject ->
            subProject.buildscript.configurations.each { configuration ->
                tryToResolveConfiguration(subProject, configuration)
            }
            subProject.configurations.each { configuration ->
                tryToResolveConfiguration(subProject, configuration)
            }
        }
    }
}

void tryToResolveConfiguration(Project subProject, Configuration configuration) {
    print "Resolving configuration: $subProject -> $configuration ... "
    if (configuration.canBeResolved) {
        configuration.resolve()
        println "DONE"
    } else {
        println "CAN NOT BE RESOLVED"
    }
}
